#!/bin/bash
#
# by William Hofferbert
#
# This is a script to rebuild a specified *buntu iso into a customized iso
#

help_label="MATE 16.04.3 LTS"
help_iso_name="mate"
help_in_iso="ubuntu-mate-16.04.3-desktop-amd64.iso"

label="iso-rebuild-custom"
release_notes_url="https://github.com/whofferbert/iso-rebuild"

out_owner="root"

workdir=/home/.iso-rebuild

helps () {
fold -w$(tput cols) -s << EOF

This is designed to take a *buntu iso image and customize it by installing or removing packages as specified in the configuration.

Must be run as root (or with sudo).

  Usage:

    $script_name [--base-iso|-i  /path/to/Input ISO] [options ...] 

  Overview:


   Input Options:

    --base-iso -i ISOFILE
      Select an iso file to start building the image off of.
      Required unless a previous build was ran with --no-clean and the --rebuild switch is used.


   Output Options:

    --out-iso -o "OUT-ISOFILE-NAME"
      Specify the filename of the finished iso. Default is in the format [base-iso-name]-custom.[extension]

    --out-dir
      Specify the output dir for the ISOs that will be built. Default is $outdir

    --out-owner
      Specify the owner of the logs and ISO files. Default is $out_owner.


    --vm-iso -V
      Run after the regular install, this will further modify the image with the specifications for VM packages 

    --out-vm-iso "OUT-VM-ISOFILE-NAME"
      Specify the filename of the finished iso. Default is in the format [base-iso-name]-custom-vm.[extension]

 
    --no-out-iso
      Do not rebuild the chroot into a squashfs for creating an iso
        
      
    --gz-iso
      Use gzip compression when building new squashfs instead of xz. (xz is default)
      xz compression provides the best compression ratio, but gzip is quicker.


    --write /dev/sdX
      Write the resulting iso to the specified device. Specified device must not be mounted.
      Will never write the vm-iso if produced as well.


   Build Options:

    --adjust -A /path/to/adjust_script
      Does not delete previous environment, but executes the specified adjust_script in the build environment

    --rebuild -R
      Does not delete previous environment, just rebuilds the squashfs from the $img_dir


    --preinstall
      Specify a script to run before updating and running package adjustments
        May be specified any number of times.

    --postinstall
      Specify a script to run after updating and running package adjustments
        May be specified any number of times.

    --vm-preinstall
      Specify a script to run before running VM package adjustments
        Same as --preinstall, but specific to VM ISOs

    --vm-postinstall
      Specify a script to run after running VM package adjustments
        Same as --postinstall, but specific to VM ISOs

    --package-config /path/to/package.conf
      Provide the path to the package configuration to use (default is ${pkg_source})


    --no-install-recommends
      Do not install any additional recommended packages when rebuilding image. Default is to install recommended packages.

    --no-upgrade
      Do not run the package upgrade in the chroot environment. Default is to run a dist-upgrade.

    --no-dist-upgrade
      Run apt-get upgrade instead of apt-get dist-upgrade. Default is to run a dist-upgrade.

    --no-clean-chroot
      Do not clean up the chroot environment after running install. Default is to run the clean.


   Investigative Options

    --login-chroot
      This option will NOT cause an image to be rebuilt, but instead, will log you into the created chroot environment.
      Once you log out of the chroot environment, the script will just exit.
      Only useful if a build has previously been used with --no-clean-local-fs


   Filesystem Options (can be specified multiple times):

    --add-archive "/path/to/local/archive.tar.gz"
      Extract the contents of a tar archive to the root of the filesystem
        tar -czvf ~/iso-rebuild-test/will.tar.gz /home/whofferbert/{.bashrc,.ssh,.vimrc}
 
    --add-zip "/path/to/local/zipfile.zip"
      Extract the contents of a zip file to the root of the filesystem


   UX Options:

    --label -l "CD LABEL"
      Specify the label name for the live image. Default is "$label"

    --casper-name
      Specify the name that will be used as both the user and hostname within the casper installer. Default is "$casper_username"

    --release-url
      Specify the release url to display during the casper install. Default is "$release_notes_url"


   Local System Options:

    --workdir -w "/path/to/workdir"
      Specify workdir location. Default is $workdir

    --no-clean-local-fs
      Does not delete the contents of the workdir after creating the ISOs.


   Debugging/Dev Options:

    --verbose
      Print all output generated when running in the chroot

    --quiet
      Surpress output from chroot, but print script info. (default)
      Note that this causes problems with interactive prompts, so you may want
      to try using --verbose if you seem to be having issues.

    --real-quiet
      Surpress all output but errors

    --silent
      Surpress all output, including errors. 

    --help -h
      Print this help text.



   Examples:

     # Create a new ISO with a custom label:
     sudo $script_name -i ~/ubuntu-mate-16.04.2-desktop-amd64.iso -l "Support Linux"

     # Create a new ISO and VM ISO with a custom label:
     sudo $script_name -i ~/ubuntu-mate-16.04.2-desktop-amd64.iso -V

     # Create an iso with a custom output name:
     sudo $script_name -i ~/$help_in_iso -o "${help_iso_name}-16.04.3-\$(date +%Y%m%d-%H%M%S)-stable-x86_64.iso

     # create an ISO with additional .deb files installed via postinstall script and a matching archive :
     mkdir /tmp/deb/
     cp -t /tmp/deb/ /path/to/deb1 /path/to/deb2 ...
     tar -czvf /tmp/debs.tar.gz /tmp/deb/*
     sudo $script_name -i ~/$help_in_iso --add-archive /tmp/debs.tar.gz --postinstall ./post.sh 

     # create an ISO with some contents from your home directory on it :
     tar -czvf /tmp/$owner.tar.gz /home/$owner/{.ssh,.bashrc,.vimrc,Documents}
     sudo $script_name -i ~/$help_in_iso --add-archive /tmp/$owner.tar.gz 

     # Optionally, you could include your whole home dir, 
     # but beware, the ISO may be large, and your filesystem needs size to handle it
     # You should not try this unless your home dir is less than 25% of your free space

     tar -czvf /tmp/$owner.tar.gz /home/$owner/.
     sudo $script_name -i ~/$help_in_iso --add-archive /tmp/$owner.tar.gz 
     

     # add to the ISO a copy of /etc/default/sysstat that is enabled, via archive:
     sudo $script_name -i ~/$help_in_iso --add-archive ./sysstat_on.tar.gz 

     # Create a new ISO and VM ISO with additional VM preinstall script:
     sudo $script_name -i ~/$help_in_iso -V --vm-preinstall ./pp_vm_init.sh

     # Create a new ISO with additional preinstall script for adding a Google repository and Chrome:
     sudo $script_name -i ~/$help_in_iso --preinstall ./init.sh 

     # Create a new ISO with a custom package config file, and a specified output directory:
     sudo $script_name -i ~/$help_in_iso --package-config ./install_pkgs 

     # Create a new ISO with a custom package config file, and a specified output directory:
     sudo $script_name -i ~/$help_in_iso --out-dir /home/$owner


     # Create a chroot and modify it, but do not make the iso afterward, and do not clean up:
     sudo $script_name -i ~/$help_in_iso --no-clean-local-fs --no-out-iso

     # Don't reset the workdir, but take an existing chroot and make that an iso:
     sudo $script_name -i ~/$help_in_iso --rebuild --dont-run-install

     # The combination of the above two commands will allow you to look at and/or
     # modify it ($chroot), and then put the resultant chroot environment onto the ISO


     # You can combine most/all of the above options ...
     sudo $script_name -i ~/$help_in_iso -l "will-linux" --package-config ./package.conf.example --add-archive ~/will.tar.gz --preinstall ./init.sh --no-install-recommends -o "will-buntu-16.04.iso" --add-archive ./sysstat_on.tar.gz --postinstall ./post.sh --out-dir ~/


     # Explore an already built environment (with --no-clean-local-fs)
     sudo $script_name --login-chroot

EOF
exit
}


handle_args () {
  OPTS=$(getopt -o hi:w:o:l:O:qsVRb:A:v --long "help,iso:,
  workdir:,out-iso:,label:,no-install-recommends,nowrite,
  quiet,silent,write:,gz-iso,vm-iso,rebuild,buildstate:,
  adjust:,preinstall:,postinstall:,vm-preinstall:,login-chroot,
  vm-postinstall:,no-upgrade,no-clean-chroot,package-config:,
  out-dir:,out-vm-iso:,no-out-iso,verbose,no-status,
  real-quiet,no-dist-upgrde,dont-run-install,casper-name:
  no-clean-local-fs,add-archive:,add-zip:,out-owner:"  -- "$@")
  
  eval set -- "$OPTS"
  while true
    do
      case "$1" in
        -h|--help) helps; shift;;
        -i|--iso) base_iso="$2"; shift 2;;
        -w|--workdir) workdir="$2"; shift 2;;
        -o|--out-iso) out_iso_name="$2"; shift 2;;
        -O|--out-dir) outdir="$2"; shift 2;;
        -b|--build) buildstate="$2"; shift 2;;
        -l|--lablel) label="$2"; shift 2;;
        -V|--vm-iso) vm_isobuild=t; shift;;
        -A|--adjust) run_adjust=t ; start_over=f ; adjust_script=$2 ; shift 2;;
        -R|--rebuild) start_over=f; shift;;
        -q|--quiet) chroot_fd=">/dev/null" ; shift;;
        -v|--verbose) chroot_fd="" ; shift;;
        -s|--silent) q=">/dev/null 2>/dev/null" ; shift;;
        --real-quiet) q=">/dev/null" ; chroot_fd=">/dev/null 2>/dev/null"; shift;;
        --out-vm-iso) vm_iso_name="$2"; shift 2;;
        --write) out_dev="$2"; shift 2;;
        --no-install-recommends) inst="--no-install-recommends" ; shift ;;
        --preinstall) build_init_script+=("$2") ; shift 2;;
        --postinstall) build_post_script+=("$2") ; shift 2;;
        --vm-preinstall) vm_init_script+=("$2") ; shift 2;;
        --vm-postinstall) vm_post_script+=("$2") ; shift 2;;
        --package-config) pkg_source="$2" ; shift 2;;
        --gz-iso) comp="gz" ; shift;;
        --no-upgrade) upgrade_build_env=f ; shift;;
        --no-clean-chroot) clean_build_env=f ; shift;;
        --no-out-iso) no_out_iso=t ; shift;;
        --no-dist-upgrade) upgrade_type="upgrade" ; shift;;
        --no-clean-local-fs) clean_local_fs="f" ; shift;;
        --dont-run-install) run_install="f" ; shift;;
        --no-status) no_status="t" ; shift;;
        --casper-name) casper_username="$2" ; shift 2;;
        --add-archive) addtar+=("/ $2"); shift 2;;
        --add-zip) addzip+=("/ $2"); shift 2;;
        --out-owner) out_owner="$2"; shift 2;;
        --login-chroot) chroot_login="t" ; shift;;
        --) shift; break;;
      esac
  done
}


err () {
  echo "$1" >&2
  exit 2
}


warn () {
  echo "$1" >&2
}


find_nonroot_owner () {
  pids="(^|\s)$$($|\s)"
  i=0
  while [ -z "$owner" ] 
    do
      pids=$(ps -eo user:30,pid,ppid,pcpu,pmem,vsz,rss,tty,stat,start,time,comm,args | awk '{print $2, $3}' | grep -P "$pids" | sed -r 's/\s/\n/g'| sort -u | sed -e 's/^/(^|\\s)/g' -e 's/$/($|\\s)/g' | paste -sd"|")
      owner=$(ps -eo user:30,pid,ppid,pcpu,pmem,vsz,rss,tty,stat,start,time,comm,args | awk '{print $1, $2, $3}' | grep -P "$pids" | awk '{print $1}' | sort -u | grep -v 'root')
      [ $i -gt 15 -o -z "$pids" ] && warn "Unable to identify non-root caller!" && echo root
      i=$(($i + 1))
    done
}


sanity_checks () {
  # required stuff
  for req in $requires
    do
      [ -z "$(which $req)" ] && err "Error: $script_name requires $req to continue!"
    done

  # need root
  [ $(whoami) != root ] && err "Error: must be root to continue."
  # need pkg source
  [ -e $pkg_source ] && source $pkg_source || err "Error: $pkg_source does not exist"
  # need base iso or chroot login
  [ -z "$base_iso" -a "$start_over" != "f" -a "$chroot_login" != "t" ] && err "Error: base-iso is required. See the help ($self --help"

  # sanity checks for output device
  if [ -n "$out_dev" ]
    then
      check=($(mount | grep "$out_dev"))
      [ -n "$check" ] && err "Error: $out_dev is mounted at: ${check[2]}"
      [ ! -b "$out_dev" ] && err "Error: $out_dev is not a valid device to write to!" 
  fi

  # iso only supports 32 character label
  [ ${#label} -gt 32 ] && warn "Label \"$label\" is too long! (32 characters max) Truncating label ..." && label=$(echo "$label" | cut -c1-32)

  # set out iso name if need be
  if [ -z "$out_iso_name" ] 
    then
      base_iso_name=${base_iso##*/}
      out_iso_name=$(echo "$base_iso_name" | sed -r 's/\.(\w{3})$/-custom.\1/g')
  fi
  
  # set vm iso name too
  if [ "$vm_isobuild" = 't' ]
    then
      [ -z "$vm_iso_name" ] && vm_iso_name=$(echo "$out_iso_name" | sed -r 's/\.(\w{3})$/-vm.\1/g')
  fi

  tmp_mount=$workdir/base
  img_dir=$workdir/image
  chroot=$workdir/chroot

  logfile=$outdir/${script_name}.log
  errfile=$outdir/${script_name}.err

  [ -z "$casper_username" ] && casper_username=$default_casper_username
}


mount_sanity () {
  # logic to help save the shared dev env from suffering an rm
  #chroot_mounts=$(mount | awk '{print $3}' | grep $workdir | tac)
  chroot_mounts=$(mount | awk '{print $3}' | grep $workdir | tac | grep -v base)
  [ -n "$chroot_mounts" ] && unmount_chroot_procs
  #chroot_mounts=$(mount | awk '{print $3}' | grep $workdir | tac)
  chroot_mounts=$(mount | awk '{print $3}' | grep $workdir | tac | grep -v base)
  if [ -n "$chroot_mounts" ]
    then
      for mount in $chroot_mounts
        do
          umount $mount || err "unable to unmount $mount!"
        done
  fi
}


cleanup () {
  echo "Received interrupt, exiting ..."
  unmount_chroot_procs
  umount $img_dir
  umount $chroot/dev
  mount_sanity
  exit 1
}


clean_build_env () {
  autorm_pkgs=$(chroot $chroot apt-get autoremove -s | grep ^Remv | awk '{print $2}')
  [ -n "$autorm_pkgs" ] && eval chroot $chroot apt-get purge $autorm_pkgs $chroot_fd
  eval chroot $chroot apt-get clean $chroot_fd
  find $chroot/tmp/ -mindepth 1 -delete
}

clear_workdir () {
  echo -e "\nRemoving old files from $workdir ..."
  rm -rf $workdir
}

reset_workdir () {
  mount_sanity
  clear_workdir
  mkdir -p $tmp_mount 
  mkdir -p $img_dir
  # DO NOT MAKE THE CHROOT DIR
  # unsquashfs will fail if it exists
}


mount_chroot_procs () {
  mount --bind /dev $chroot/dev
  eval chroot $chroot mount none -t proc /proc $chroot_fd
  eval chroot $chroot mount none -t sysfs /sys $chroot_fd
  eval chroot $chroot mount none -t devpts /dev/pts $chroot_fd
}


unmount_chroot_procs () {
  eval chroot $chroot umount -lf /dev/pts $chroot_fd
  eval chroot $chroot umount -lf /sys $chroot_fd
  eval chroot $chroot umount -lf /proc $chroot_fd
  eval chroot $chroot umount /dev
  mount | grep $workdir | awk '{print $3}' | tac | while read mntpoint
    do
      sudo umount $mntpoint
    done
}


extract_fs_from_mount () {
  mount -o loop $base_iso $tmp_mount 2>/dev/null ||  err "Failed to mount $base_iso"
  
  echo -e "\nCopying base image to disk ...\n"
  rsync --info=progress2 -a $tmp_mount/ $img_dir/ 
  
  umount $tmp_mount 
  
  # grab base fs from the filesystem.squashfs
  echo -e "\nExtracting live filesystem to chroot environment ...\n"
  unsquashfs -d $chroot $img_dir/casper/filesystem.squashfs
}


chroot_install () {
  pkgs=$@
  if [ -n "$pkgs" ]
    then
      echo -e "\nChecking package validity ... \n"
      pkg_sanity=
      for pkg_check in $pkgs
        do
          check=$(chroot $chroot apt-cache policy $pkg_check | grep -P "Candidate:\s")
          if [ -z "$check" ]
            then
              warn "$pkg_check is not a valid package! Skipping ..."
            else
              pkg_sanity="$pkg_check $pkg_sanity"
          fi
        done
      echo -e "\nInstalling $pkg_sanity into chroot environment ... \n"
      eval chroot $chroot apt-get install -y $inst $pkg_sanity $chroot_fd
      if [ $? -ne 0 ]
        then
          echo -e "\nEncountered a problem! Trying packages one at a time ...\n"
          for pkg in $pkg_sanity
            do
              eval chroot $chroot apt-get install -y $inst $pkg $chroot_fd
              [ $? -ne 0 ] && warn "Unable to install $pkg!" || pkg_adds+=($pkg)
            done
        else
          for pkg in $pkg_sanity
            do
              pkg_adds+=($pkg)
            done
      fi
  fi
}


chroot_purge () {
  pkgs=$@
  if [ -n "$pkgs" ] 
    then
      echo -e "\nPurging $pkgs from chroot environment ...\n"
      eval chroot $chroot apt-get purge -y $pkgs $chroot_fd
      for pkg in $pkgs
        do
          pkg_rms+=($pkg)
        done
  fi
}


chroot_exec () {
  # assumes necessary chroot mounts are there already ...
  exec_script=$1
  safe_dir=/tmp/$RANDOM
  mkdir -p $chroot/$safe_dir
  cp $exec_script $chroot/$safe_dir
  script=${exec_script##*/}
  chmod 755 $chroot/$safe_dir/$script
  echo "Entering chroot environment and executing $script ..."
  eval chroot $chroot $safe_dir/$script $chroot_fd
  rm -rf $chroot/$safe_dir
}

add_zips_to_chroot () {
  for data in "${addzip[@]}"
    do
      dest=$(echo "$data" | cut -d" " -f1)
      file=$(echo "$data" | cut -d" " -f2-)
      [ ! -d $chroot/$dest ] && mkdir -p $chroot/$dest
      unzip $file -d $chroot/$dest
    done
}

add_tars_to_chroot () {
  for data in "${addtar[@]}"
    do
      dest=$(echo "$data" | cut -d" " -f1)
      file=$(echo "$data" | cut -d" " -f2-)
      [ ! -d $chroot/$dest ] && mkdir -p $chroot/$dest
      tar -xf $file -C $chroot/$dest
    done
}


run_install () {
  echo -e "\nRunning iso customizations ...\n\nThis may take a while ...\n"

  if [ ${#build_init_script} -gt 0 ] 
    then
      for script in "${build_init_script[@]}" ; do chroot_exec $script ; done
  fi

  [ ${#addzip[@]} -gt 0 ] && add_zips_to_chroot
  [ ${#addtar[@]} -gt 0 ] && add_tars_to_chroot

  eval chroot $chroot apt-get update $chroot_fd

  for pkg_rm in "$PRERM_PKGS" "$REMOVE_PKGS" "$POSTRM_PKGS"
    do
      chroot_purge $pkg_rm
    done

  for pkg_batch in "$PREINSTALL_PKGS" "$INSTALL_PKGS" "$POSTINSTALL_PKGS" "$TESTING_PKGS"
    do
      chroot_install $pkg_batch
    done

  # upgrade
  if [ "$upgrade_build_env" = "t" ] 
    then
      echo -e "Entering chroot and running apt-get $upgrade_type ...\n"
      eval chroot $chroot apt-get $upgrade_type -y $chroot_fd
  fi

  # post-upgrade
  for pkg_rm in "$POST_UPGRADE_PRERM_PKGS" "$POST_UPGRADE_REMOVE_PKGS" "$POST_UPGRADE_POSTRM_PKGS"
    do
      chroot_purge $pkg_rm
    done

  for pkg_batch in "$POST_UPGRADE_PREINSTALL_PKGS" "$POST_UPGRADE_INSTALL_PKGS" "$POST_UPGRADE_POSTINSTALL_PKGS"
    do
      chroot_install $pkg_batch
    done

  if [ ${#build_post_script} -gt 0 ] 
    then
      for script in "${build_post_script[@]}" ; do chroot_exec $script ; done
  fi

  # clean build env?
  [ "$clean_build_env" = "t" ] && clean_build_env
}


vm_iso_rebuild () {
  echo -e "\nRunning VM modifications ...\n\nThis may take a while ..."
  
  # tweak deployment.type
  mount_chroot_procs

  #[ -n "$vm_init_script" ] && chroot_exec $vm_init_script 
  if [ ${#vm_init_script} -gt 0 ] 
    then
      for script in "${vm_init_script[@]}" ; do chroot_exec $script ; done
  fi

  for pkg_rm in "$VM_PRERM_PKGS" "$VM_REMOVE_PKGS" "$VM_POSTRM_PKGS"
    do
      chroot_purge $pkg_rm
    done
 
  for pkg_batch in "$VM_PREINSTALL_PKGS" "$VM_INSTALL_PKGS" "$VM_POSTINSTALL_PKGS" "$VM_TESTING_PKGS"
    do
      chroot_install $pkg_batch
  done

  #[ -n "$vm_post_script" ] && chroot_exec $vm_post_script 
  if [ ${#vm_post_script} -gt 0 ] 
    then
      for script in "${vm_post_script[@]}" ; do chroot_exec $script ; done
  fi

  unmount_chroot_procs
  
  [ "$comp" = "gz" ] && vm_struct="--gz-iso"

  # this recalls the current script with --rebuild to finalize the VM iso
  $self $vm_struct -i $base_iso -o "${vm_iso_name}" -l "$label" --rebuild --package-config $pkg_source --out-dir "$outdir" --dont-run-install --no-status --out-owner "$owner"
}


write_cd_info () {
  # make files writable
  chmod 644 $img_dir/README.diskdefines $img_dir/.disk/info $img_dir/.disk/release_notes_url $img_dir/isolinux/txt.cfg
  # make adjustments
  sed -i "s/DISKNAME.\+/DISKNAME $label/g" $img_dir/README.diskdefines
  # first term of the next line used to dictate the live user name and system name
  echo -n "$casper_username $label" > $img_dir/.disk/info
  sed -i 's/# export FLAVOUR=/export FLAVOUR=/' $chroot/etc/casper.conf
  sed -i "s/USERNAME=\"[^\"]*\"/USERNAME=\"$casper_username\"/" $chroot/etc/casper.conf
  echo -n "$release_notes_url" > $img_dir/.disk/release_notes_url
  sed -i 's/quiet splash/noeject noprompt/g' $img_dir/isolinux/txt.cfg
  # put perms back
  chmod 444 $img_dir/README.diskdefines $img_dir/.disk/info $img_dir/.disk/release_notes_url $img_dir/isolinux/txt.cfg
}


rebuild_squashfs () {
  # build chroot package list for live cd
  chroot $chroot dpkg-query -W --showformat='${Package} ${Version}\n' > $img_dir/casper/filesystem.manifest 
  
  # get rid of old squashfs.
  rm -f $img_dir/casper/filesystem.squashfs
  
  # build new squashfs. 
  echo -e "Building new filesystem from chroot environment ...\n\n  This will take some time ...\n"
  if [ $comp = xz ]
    then
      mksquashfs $chroot $img_dir/casper/filesystem.squashfs -b 1048576 -comp xz -Xdict-size 100%
    else
      mksquashfs $chroot $img_dir/casper/filesystem.squashfs
  fi
  
  #  sizes
  printf $(du -sx --block-size=1 $chroot | cut -f1) > $img_dir/casper/filesystem.size
}


chroot_to_iso () {
  # set up files for iso to behave
  write_cd_info
  
  # the heavy lifting...
  rebuild_squashfs

  # build md5sums.txt for iso ...
  find $img_dir -type f -print0 | xargs -0 md5sum | sed "s; $img_dir; ;" | grep -v "\./md5sum.txt$" > $img_dir/md5sum.txt
  
  # build iso
  echo -e "\nBuilding new image ...\n"
  mkisofs -r -V "$label" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -input-charset 'utf-8' -o $outdir/$out_iso_name   $img_dir/.  2>&1 | grep -v "estimate finish"
  
  # make it hybrid
  echo -e "\nMaking image USB friendly ...\n"
  isohybrid $outdir/$out_iso_name 

  [ "$out_owner" != 'root' ] && chown ${out_owner}:${out_owner} $outdir/$out_iso_name
}


fresh_start () {
  reset_workdir

  extract_fs_from_mount

  # set up networking based on host for chroot
  cp /etc/hosts $chroot/etc 
  cp /etc/resolv.conf $chroot/etc 
}


logging () {
  startdate=$(date +%s)
  [ -e $logfile ] && mv $logfile ${logfile}.old
  [ -e $errfile ] && mv $errfile ${errfile}.old
  #exec > >(logger | tee -a $logfile)
  exec > >(sudo -u $out_owner tee -a $logfile)
  exec 2> >(sudo -u $out_owner tee -a $errfile)
}


logger () {
  while read
    do
      echo "[$(date +%Y-%m-%d\ %H:%M:%S.%N)] $REPLY"
    done
}


write () {
  echo -e "\nWriting $out_iso_name to $out_dev ...\n\n  This may take some time ...\n"
  [ ! -e $outdir/$out_iso_name ] && err "Error: $outdir/$out_iso_name does not exist!"
  dd if=$outdir/$out_iso_name of=$out_dev
}

convertsecs() {
  ((h=${1}/3600))
  ((m=(${1}%3600)/60))
  ((s=${1}%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}


status_out () {
  enddate=$(date +%s)
  time_diff=$(($enddate - $startdate))
  echo "Completed in $(convertsecs $time_diff)"
  [ ${#pkg_adds[@]} -gt 0 ] && echo "Added ${#pkg_adds[@]} packages"
  [ ${#pkg_rms[@]} -gt 0 ] && echo "Removed ${#pkg_rms[@]} packages"
  echo "Output ISO(s) are available in $outdir"
}


visit_chroot () {
  #enter the chroot, then leave it, unmount and exit
  mount_chroot_procs
  chroot $chroot
  unmount_chroot_procs
  exit
}


set_env () {
  script_path=$( cd "$(dirname "$0")" ; pwd -P ) 
  script_name=$(basename $0)
  self=$script_path/$script_name
 
  pkg_source=$script_path/package.conf

  default_casper_username=custom

  base_iso=
  inst=
  q=
  out_dev=
  vm_iso_name=

  comp=xz

  run_install=t
  upgrade_build_env=t
  clean_build_env=t
  clean_local_fs=t
  start_over=t

  run_adjust=f
  no_out_iso=f
  no_status=f

  chroot_fd=">/dev/null"

  addzip=()
  addtar=()
  build_init_script=()
  build_post_script=()
  vm_init_script=()
  vm_post_script=()
  pkg_adds=()
  pkg_rms=()

  startdate=$(date +%s)

  upgrade_type="dist-upgrade"
  label="iso-rebuild-custom"
  release_notes_url="https://github.com/whofferbert/iso-rebuild"

  workdir=/home/.iso-rebuild

  out_owner="root"
  owner=
  [ $(whoami) = "root" ] && find_nonroot_owner || owner=$(whoami)
  eval outdir=~$owner/
  [ $owner != 'root' ] && out_owner=$owner

  requires="unsquashfs chroot mkisofs isohybrid mksquashfs date sed grep ps whoami rsync mount umount awk fold tput dirname basename dd cp getopt chmod find du sort unzip tar date"
}

main () {
 
  ### logic and stuff
  sanity_checks
 
  [ "$chroot_login" = t ] && visit_chroot
 
  # trap interrupts to not break things
  trap cleanup 1 2 3 6 9 15 17 19 23

  logging

  # destroy all previous work?
  [ "${start_over}" = 't' ] && fresh_start

  # virtual fs are important
  mount_chroot_procs

  # building logic.... run adjust or install
  [ "$run_adjust" = "t" ] && chroot_exec $adjust_script
  [ "$run_install" = "t" ] && run_install
  
  #unmount virtual fs to prevent host corruption
  unmount_chroot_procs

  # rebuild squashfs and create iso
  [ "$no_out_iso" = "f" ] && chroot_to_iso 
  
  # possibly make vm image
  [ "$vm_isobuild" = "t" ] && vm_iso_rebuild
  
  # check for write to device?
  [ -n "$out_dev" ] && write

  [ "$clean_local_fs" = "t" ] && clear_workdir

  [ "$no_status" = f ] && status_out
}


# do the thing
set_env
handle_args $@
eval main $q

